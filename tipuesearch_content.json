{"pages":[{"url":"http://blog.ravens.cc/articles/Scrapy.html","title":"Scrapy抓取SMZDM优惠信息","text":"SMZDM是一个近几年比较有名的商品推荐类网站。 最近学习了Scrapy爬虫，今天就拿他试试学习成果，抓取下上面的优惠信息。 创建project: 1 scrapy startproject smzdm Items 分析下需要抓取的信息，我们需要商品的名称，价格，具体描述和推送时间。 据此建立我们的items.py 1 2 3 4 5 6 7 8 # -*- coding: utf-8 -*- from scrapy.item import Item , Field class zdmItem ( Item ): title = Field () desc = Field () price = Field () time = Field () Pipelines 定义Pipeline处理item，并保存结果到smzdm.json中,pipelines.py 1 2 3 4 5 6 7 8 9 10 11 12 # -*- coding:utf-8 -*- import json import codecs class SmzdmPipeline ( object ): def __init__ ( self ): self . file = codecs . open ( 'smzdm.json' , 'wb' , encoding = 'utf-8' ) def process_item ( self , item , spider ): line = json . dumps ( dict ( item )) + ' \\n ' self . file . write ( line . decode ( \"unicode_escape\" )) return item settings settings.py中主要是对爬虫进行配置，这里加上pipeline的配置 1 2 3 ITEM_PIPELINES = { 'smzdm.pipelines.SmzdmPipeline':100 } 编写Spider 下面编写我们的Spider 编写Spider需要考虑下网页的遍历方式，通过观察优惠页面，发现了一种很容易的方式，那就是选择第一篇优惠信息作为start_url，分析上一页的链接，爬取下一个优惠信息。 对于我们关心的title,price,description,time和link，直接可以利用xpath分析得到。 spiders/zdmSpider.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 # -*- coding:utf-8 -*- from smzdm.items import zdmItem from scrapy.http import Request from scrapy.spiders import Spider class zdmSpider ( Spider ): name = \"zdm\" allowed_domains = [ \"smzdm.com\" ] start_urls = [ \"http://www.smzdm.com/p/702599\" ] def parse ( self , response ): item = zdmItem () title = response . xpath ( '//h1/text()' )[ 0 ] . extract () . encode ( 'utf-8' ) . lstrip () link = response . xpath ( '//div[@class=\"pre_next_article\"]/span[1]/a/@href' )[ 0 ] . extract () if len ( response . xpath ( '//h1/span/text()' )) > 0 : price = response . xpath ( '//h1/span/text()' )[ 0 ] . extract () . encode ( 'utf-8' ) else : price = \"\" desc = response . xpath ( '//p[@itemprop=\"description\"]/text() | \\ //p[@itemprop=\"description\"]/a/text() | \\ //p[@itemprop=\"description\"]/strong/text()' ) item [ 'desc' ] = \"\" for des in desc : item [ 'desc' ] += des . extract () . encode ( 'utf-8' ) item [ 'title' ] = title item [ 'price' ] = price item [ 'time' ] = response . xpath ( '//span[@class=\"lrTime\"]/text()' )[ 0 ] . extract () yield item yield Request ( link ) 启动Spider 运行爬虫： 1 scrapy crawl zdm 查看smzdm.json (省略部分description) 1 2 3 4 5 6 7 8 9 10 11 12 {\"price\": \"2199元包邮，赠摄影包\", \"time\": \"2015-09-18 13:10\", \"desc\": \"尼康入门级单反近期好价，。。。\", \"title\": \"Nikon 尼康 D3200 单反套机（含18-55mm VR II镜头）\"} {\"price\": \"过期\", \"time\": \"2015-09-18 12:11\", \"desc\": \"这次39元购力博得ELEC电动专用刷头套装（2支装），3支刷头，值得推荐。\"\", \"title\": \"\"} {\"price\": \"89元包邮，买一赠一\", \"time\": \"2015-09-18 11:51\", \"desc\": \"适合熟龄肌肤，中样买一赠一。Lancome兰蔻根源补养美容液，是一款含天然植物提取精华的护肤品。\", \"title\": \"LANCOME 兰蔻 根源补养美容液 中样 50ml\"}","tags":"Spider"},{"url":"http://blog.ravens.cc/articles/Pelican.html","title":"基于Pelican的Blog搭建","text":"记录下小站的搭建过程： 1. 简介 Pelican Pelican是一个用Python语言编写的静态网站生成器，支持使用restructuredText和Markdown写文章，配置灵活，扩展性强，有许多优秀的主题和插件可供使用。 Pelican 的Github地址是： https://github.com/getpelican/pelican Github Pages GitHub Pages本用于介绍托管在GitHub的项目， 由于空间免费稳定，用来做搭建一个博客再好不过。 Github Pages提供了两种Pages模式： 1. User/Organization Pages 个人或公司站点 使用自己的用户名，每个用户名下面只能建立一个； 资源命名必须符合这样的规则username/username.github.com； 主干上内容被用来构建和发布页面 2. Project Pages 项目站点 gh-pages分支用于构建和发布； 如果user/org pages使用了独立域名，那么托管在账户下的所有project pages将使用相同的域名进行重定向，除非project pages使用了自己的独立域名； 如果没有使用独立域名，project pages将通过子路径的形式提供服务username.github.com/projectname； 自定义404页面只能在独立域名下使用，否则会使用User Pages 404； 这里选用了项目站点, gh-pages这种方式 2. Git的安装与配置 安装 1 apt-get install git 配置 1 2 git config --global user.name \"xxx\" git config --global user.emailxxx@gmail.com 配置Git验证 Git的验证方式有Https和SSH两种，这里选用Https, 配置Git的credential helper 1 2 git config --global credential.helper cache git config --global credential.helper 'cache --timeout=3600' 查看配置信息 1 git config --list 3. Pelican简单上手 安装 1 2 pip install pelican pip install markdown 创建项目目录 1 2 mkdir myblog cd myblog 运行pelican快速向导 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 pelican-quickstart Welcome to pelican-quickstart v3.6.3. This script will help you create a new Pelican-based website. Please answer the following questions so this script can generate the files needed by Pelican. > Where do you want to create your new web site? [.] > What will be the title of this web site? Raven Site > Who will be the author of this web site? Raven > What will be the default language of this web site? [en] zh > Do you want to specify a URL prefix? e.g., http://example.com (Y/n) y > What is your URL prefix? (see above example; no trailing slash) http://raven47git.github.io > Do you want to enable article pagination? (Y/n) > How many articles per page do you want? [10] > What is your time zone? [Europe/Paris] > Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) > Do you want an auto-reload & simpleHTTP script to assist with theme and site development? (Y/n) > Do you want to upload your website using FTP? (y/N) > Do you want to upload your website using SSH? (y/N) > Do you want to upload your website using Dropbox? (y/N) > Do you want to upload your website using S3? (y/N) > Do you want to upload your website using Rackspace Cloud Files? (y/N) > Do you want to upload your website using GitHub Pages? (y/N) y Done. Your new project is available at /home/raven/python/pelican_env/src/blog 配置pelicanconf.py,加入如下内容 1 2 3 4 5 6 7 8 9 10 # Content path PATH = 'content' PAGE_PATHS = ['pages'] ARTICLE_PATHS = ['articles'] STATIC_PATHS = ['images', 'files'] # URL SITEURL = 'http://raven47git.github.io/blog' ARTICLE_URL = ('articles/{slug}.html') ARTICLE_SAVE_AS = ('articles/{slug}.html') 进入content目录,创建一些相关的内容目录 1 mkdir articles files images pages 4. 使用Markdown 1 2 cd articles vi hello.md 内容为 1 2 3 4 5 6 7 Title : Hello Date : 2015 - 09 - 17 20 : 32 Category : Other Author : Raven Summary : hello Hello , everyone ! 编译页面 1 make html 预览结果 直接调用脚本develop_server.sh即可 1 2 3 ./develop_server.sh start ./develop_server.sh stop 打开 http://localhost:8000/ 即可看到生成的页面 5. 上传到github 首先需要在github主页里创建一个新的repo: myblog, 接下来就生成的页面push到这个repo 1 2 3 4 5 6 7 cd output git init git checkout --orphan gh-pages git remote add origin https://github.com/raven47git/myblog.git git add -A git commit -m \"Update Blog\" git push -u origin gh-pages 现在去 http://raven47git.github.io/myblog 即可看到劳动成果啦～～ 6. Pelican主题&插件 主题设置 下载风格包pelican-themes与插件包pelican-plugins 1 2 git clone https://github.com/getpelican/pelican-themes.git git clone https://github.com/getpelican/pelican-plugins.git 在pelican-thems中选择一个喜欢的主题， 放入 blog所在文件夹，在配置文件中指定主题名称 1 THEME = 'zurb-F5-basic' 7. 总结 一步一步摸索着建起这个Blog，还是蛮有意思的，希望对也想搭一个类似Blog的各位有些帮助。 Pelican doc: http://pelican.readthedocs.org/en/3.6.3/quickstart.html Python Markdown: http://pythonhosted.org/Markdown/index.html","tags":"Web"},{"url":"http://blog.ravens.cc/articles/hello-my-pelican-site.html","title":"Hello My Pelican Site","text":"最近发现之前看过的一些东西过了段时间就忘记了，深感技术还是要多总结。 今天花了一晚上时间搭了这个基于Pelican的Blog，用来记录平常学习的知识，希望可以坚持下去。","tags":"Other"}]}